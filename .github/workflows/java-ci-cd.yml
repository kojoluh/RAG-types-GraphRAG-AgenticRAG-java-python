name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aviation-graph-rag-java/**'
      - 'onboarding-agentic-rag-java/**'
      - '.github/workflows/java-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'aviation-graph-rag-java/**'
      - 'onboarding-agentic-rag-java/**'
      - '.github/workflows/java-ci-cd.yml'

env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.5'

jobs:
  # Code Quality & Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag-java, onboarding-agentic-rag-java]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Checkstyle
      run: |
        cd ${{ matrix.project }}
        mvn checkstyle:check

    - name: Run SpotBugs
      run: |
        cd ${{ matrix.project }}
        mvn spotbugs:check

    - name: Run PMD
      run: |
        cd ${{ matrix.project }}
        mvn pmd:check

    - name: Run SonarQube
      uses: sonarqube-quality-gate-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=${{ matrix.project }}
          -Dsonar.sources=src/main/java
          -Dsonar.tests=src/test/java
          -Dsonar.java.binaries=target/classes
          -Dsonar.java.test.binaries=target/test-classes

    - name: Run OWASP Dependency Check
      run: |
        cd ${{ matrix.project }}
        mvn org.owasp:dependency-check-maven:check

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-${{ matrix.project }}
        path: ${{ matrix.project }}/target/dependency-check-report.html

  # Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag-java, onboarding-agentic-rag-java]
    
    services:
      neo4j:
        image: neo4j:5.14.1
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687

      weaviate:
        image: semitechnologies/weaviate:1.22.4
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
          PERSISTENCE_DATA_PATH: /var/lib/weaviate
          DEFAULT_VECTORIZER_MODULE: none
          ENABLE_MODULES: text2vec-openai
          CLUSTER_HOSTNAME: node1
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8080:8080

      chromadb:
        image: chromadb/chroma:latest
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
          CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["*"]'
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8000:8000

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      rabbitmq:
        image: rabbitmq:3.12-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: password
        options: >-
          --health-cmd "rabbitmq-diagnostics ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run unit tests
      run: |
        cd ${{ matrix.project }}
        mvn test -Dtest=*Test

    - name: Run integration tests
      run: |
        cd ${{ matrix.project }}
        mvn test -Dtest=*IT

    - name: Run TestContainers tests
      run: |
        cd ${{ matrix.project }}
        mvn test -Dtest=*TestContainers* -Dspring.profiles.active=test

    - name: Generate test reports
      run: |
        cd ${{ matrix.project }}
        mvn surefire-report:report jacoco:report

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.project }}
        path: ${{ matrix.project }}/target/site/

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.project }}
        path: ${{ matrix.project }}/target/site/jacoco/

  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag-java, onboarding-agentic-rag-java]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        paths: ${{ matrix.project }}
        output-format: sarif
        output-file: semgrep-results.sarif

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-${{ matrix.project }}
        path: semgrep-results.sarif

    - name: Run CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
        paths: ${{ matrix.project }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Container Security Scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag-java, onboarding-agentic-rag-java]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd ${{ matrix.project }}
        docker build -t ${{ matrix.project }}:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.project }}:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-${{ matrix.project }}
        path: trivy-results.sarif

    - name: Run Snyk container scan
      uses: snyk/actions/docker@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: ${{ matrix.project }}:test
        args: --severity-threshold=high

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test, sast, container-security]
    strategy:
      matrix:
        project: [aviation-graph-rag-java, onboarding-agentic-rag-java]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build application
      run: |
        cd ${{ matrix.project }}
        mvn clean package -DskipTests

    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v3
      with:
        name: jar-${{ matrix.project }}
        path: ${{ matrix.project }}/target/*.jar

    - name: Build Docker image
      run: |
        cd ${{ matrix.project }}
        docker build -t ${{ matrix.project }}:${{ github.sha }} .
        docker tag ${{ matrix.project }}:${{ github.sha }} ${{ matrix.project }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-${{ matrix.project }}
        path: ${{ matrix.project }}/Dockerfile

    - name: Generate SBOM
      run: |
        cd ${{ matrix.project }}
        mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-${{ matrix.project }}
        path: ${{ matrix.project }}/target/bom.json

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test logic here
        # Example: curl -f http://staging-api.example.com/actuator/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check logic here
        # Example: curl -f http://prod-api.example.com/actuator/health

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Run JMeter tests
      run: |
        # Add JMeter load testing logic here
        # Example: jmeter -n -t load_tests/load_test.jmx -l results.jtl

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Security Compliance
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://staging-api.example.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: zap-results/

    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'RAG Types Java'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-results
        path: reports/

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Snyk security scan
      uses: snyk/actions/java@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run OWASP Dependency Check
      run: |
        mvn org.owasp:dependency-check-maven:check

    - name: Upload security audit results
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-results
        path: target/dependency-check-report.html

  # Container Registry Push
  push-registry:
    name: Push to Container Registry
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push images
      run: |
        # Build and push aviation-graph-rag-java
        cd aviation-graph-rag-java
        docker build -t ${{ secrets.REGISTRY_URL }}/aviation-graph-rag-java:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_URL }}/aviation-graph-rag-java:${{ github.sha }}
        docker tag ${{ secrets.REGISTRY_URL }}/aviation-graph-rag-java:${{ github.sha }} ${{ secrets.REGISTRY_URL }}/aviation-graph-rag-java:latest
        docker push ${{ secrets.REGISTRY_URL }}/aviation-graph-rag-java:latest

        # Build and push onboarding-agentic-rag-java
        cd ../onboarding-agentic-rag-java
        docker build -t ${{ secrets.REGISTRY_URL }}/onboarding-agentic-rag-java:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_URL }}/onboarding-agentic-rag-java:${{ github.sha }}
        docker tag ${{ secrets.REGISTRY_URL }}/onboarding-agentic-rag-java:${{ github.sha }} ${{ secrets.REGISTRY_URL }}/onboarding-agentic-rag-java:latest
        docker push ${{ secrets.REGISTRY_URL }}/onboarding-agentic-rag-java:latest 