name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'aviation-graph-rag/**'
      - 'onboarding-agentic-rag/**'
      - '.github/workflows/python-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'aviation-graph-rag/**'
      - 'onboarding-agentic-rag/**'
      - '.github/workflows/python-ci-cd.yml'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  # Code Quality & Security Analysis
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag, onboarding-agentic-rag]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v3
      with:
        path: ${{ matrix.project }}/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ matrix.project }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        cd ${{ matrix.project }}
        poetry install --with dev

    - name: Run Black (code formatting)
      run: |
        cd ${{ matrix.project }}
        poetry run black --check --diff src/ tests/

    - name: Run isort (import sorting)
      run: |
        cd ${{ matrix.project }}
        poetry run isort --check-only --diff src/ tests/

    - name: Run flake8 (linting)
      run: |
        cd ${{ matrix.project }}
        poetry run flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run mypy (type checking)
      run: |
        cd ${{ matrix.project }}
        poetry run mypy src/ --ignore-missing-imports

    - name: Run Bandit (security linting)
      run: |
        cd ${{ matrix.project }}
        poetry run bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload Bandit results
      uses: actions/upload-artifact@v3
      with:
        name: bandit-report-${{ matrix.project }}
        path: ${{ matrix.project }}/bandit-report.json

    - name: Run Safety (dependency vulnerability scan)
      run: |
        cd ${{ matrix.project }}
        poetry run safety check --json --output safety-report.json || true

    - name: Upload Safety results
      uses: actions/upload-artifact@v3
      with:
        name: safety-report-${{ matrix.project }}
        path: ${{ matrix.project }}/safety-report.json

  # Unit & Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag, onboarding-agentic-rag]
    
    services:
      neo4j:
        image: neo4j:5.14.1
        env:
          NEO4J_AUTH: neo4j/password
          NEO4J_PLUGINS: '["apoc"]'
        options: >-
          --health-cmd "cypher-shell -u neo4j -p password 'RETURN 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7474:7474
          - 7687:7687

      weaviate:
        image: semitechnologies/weaviate:1.22.4
        env:
          QUERY_DEFAULTS_LIMIT: 25
          AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: true
          PERSISTENCE_DATA_PATH: /var/lib/weaviate
          DEFAULT_VECTORIZER_MODULE: none
          ENABLE_MODULES: text2vec-openai
          CLUSTER_HOSTNAME: node1
        options: >-
          --health-cmd "curl -f http://localhost:8080/v1/.well-known/ready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8080:8080

      chromadb:
        image: chromadb/chroma:latest
        env:
          CHROMA_SERVER_HOST: 0.0.0.0
          CHROMA_SERVER_HTTP_PORT: 8000
          CHROMA_SERVER_CORS_ALLOW_ORIGINS: '["*"]'
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8000:8000

      redis:
        image: redis:7.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v3
      with:
        path: ${{ matrix.project }}/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ matrix.project }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        cd ${{ matrix.project }}
        poetry install --with dev

    - name: Run unit tests
      run: |
        cd ${{ matrix.project }}
        poetry run pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        cd ${{ matrix.project }}
        poetry run pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.project }}
        path: ${{ matrix.project }}/htmlcov/

    - name: Upload coverage XML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-xml-${{ matrix.project }}
        path: ${{ matrix.project }}/coverage.xml

  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag, onboarding-agentic-rag]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        paths: ${{ matrix.project }}
        output-format: sarif
        output-file: semgrep-results.sarif

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v3
      with:
        name: semgrep-${{ matrix.project }}
        path: semgrep-results.sarif

    - name: Run CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python
        paths: ${{ matrix.project }}

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Container Security Scanning
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aviation-graph-rag, onboarding-agentic-rag]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        cd ${{ matrix.project }}
        docker build -t ${{ matrix.project }}:test .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ matrix.project }}:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-${{ matrix.project }}
        path: trivy-results.sarif

  # Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, test, sast, container-security]
    strategy:
      matrix:
        project: [aviation-graph-rag, onboarding-agentic-rag]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached dependencies
      uses: actions/cache@v3
      with:
        path: ${{ matrix.project }}/.venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ matrix.project }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: |
        cd ${{ matrix.project }}
        poetry install --only main

    - name: Build package
      run: |
        cd ${{ matrix.project }}
        poetry build

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-${{ matrix.project }}
        path: ${{ matrix.project }}/dist/

    - name: Build Docker image
      run: |
        cd ${{ matrix.project }}
        docker build -t ${{ matrix.project }}:${{ github.sha }} .
        docker tag ${{ matrix.project }}:${{ github.sha }} ${{ matrix.project }}:latest

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-${{ matrix.project }}
        path: ${{ matrix.project }}/Dockerfile

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test logic here
        # Example: curl -f http://staging-api.example.com/health

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check logic here
        # Example: curl -f http://prod-api.example.com/health

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install load testing tools
      run: |
        pip install locust

    - name: Run load tests
      run: |
        # Add load testing logic here
        # Example: locust -f load_tests/locustfile.py --host=http://staging-api.example.com

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results/

  # Security Compliance
  security-compliance:
    name: Security Compliance
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'http://staging-api.example.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Upload ZAP results
      uses: actions/upload-artifact@v3
      with:
        name: zap-results
        path: zap-results/

    - name: Run Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'RAG Types'
        path: '.'
        format: 'HTML'
        out: 'reports'

    - name: Upload dependency check results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-results
        path: reports/ 